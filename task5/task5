<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dynamic E-commerce Store</title>
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Custom styles for Inter font and general body styling */
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f4f8; /* Light blue-gray background */
            color: #334155; /* Darker text color */
        }
        /* Style for scrollbar in cart */
        .cart-items-container::-webkit-scrollbar {
            width: 8px;
        }
        .cart-items-container::-webkit-scrollbar-track {
            background: #e2e8f0;
            border-radius: 10px;
        }
        .cart-items-container::-webkit-scrollbar-thumb {
            background: #94a3b8;
            border-radius: 10px;
        }
        .cart-items-container::-webkit-scrollbar-thumb:hover {
            background: #64748b;
        }
    </style>
</head>
<body class="min-h-screen flex flex-col items-center">

    <!-- Header -->
    <header class="w-full bg-white shadow-md p-4 mb-8">
        <div class="max-w-7xl mx-auto flex justify-between items-center">
            <h1 class="text-4xl font-extrabold text-blue-700">My Gadget Store</h1>
            <div class="relative">
                <button id="cartButton" class="bg-blue-600 text-white p-3 rounded-full shadow-lg hover:bg-blue-700 transition duration-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z" />
                    </svg>
                    <span id="cartItemCount" class="absolute -top-1 -right-1 bg-red-500 text-white text-xs font-bold rounded-full px-2 py-1">0</span>
                </button>
            </div>
        </div>
    </header>

    <!-- Main Content Area -->
    <main class="w-full max-w-7xl p-4 grid grid-cols-1 md:grid-cols-4 gap-8">

        <!-- Product Listing Section -->
        <section class="md:col-span-3 bg-white shadow-lg rounded-xl p-6">
            <h2 class="text-3xl font-bold text-gray-800 mb-6 text-center md:text-left">Our Products</h2>
            <div id="productsContainer" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-3 gap-6">
                <!-- Products will be dynamically loaded here by JavaScript -->
            </div>
        </section>

        <!-- Shopping Cart Section (Sidebar) -->
        <aside id="cartSidebar" class="md:col-span-1 bg-white shadow-lg rounded-xl p-6 flex flex-col h-fit sticky top-20">
            <h2 class="text-3xl font-bold text-gray-800 mb-6 text-center">Your Cart</h2>
            <div id="cartItemsContainer" class="cart-items-container flex-grow overflow-y-auto max-h-96 pr-2">
                <!-- Cart items will be dynamically loaded here by JavaScript -->
                <p id="emptyCartMessage" class="text-gray-500 text-center">Your cart is empty.</p>
            </div>
            <div class="mt-6 pt-4 border-t border-gray-200">
                <p class="text-xl font-semibold flex justify-between items-center">
                    Total: <span id="cartTotal" class="text-blue-600">$0.00</span>
                </p>
                <button id="checkoutButton" class="w-full bg-green-600 text-white py-3 mt-4 rounded-lg text-lg font-semibold hover:bg-green-700 transition duration-300 shadow-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500" disabled>
                    Checkout
                </button>
            </div>
        </aside>

        <!-- Checkout Message Modal (Hidden by default) -->
        <div id="checkoutModal" class="fixed inset-0 bg-gray-600 bg-opacity-75 flex items-center justify-center hidden">
            <div class="bg-white p-8 rounded-lg shadow-xl max-w-sm w-full text-center">
                <h3 class="text-2xl font-bold text-green-700 mb-4">Order Placed Successfully!</h3>
                <p class="text-gray-700 mb-6">Thank you for your purchase. Your order has been received and will be processed shortly.</p>
                <button id="closeModalButton" class="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition duration-300">
                    Continue Shopping
                </button>
            </div>
        </div>

    </main>

    <!-- Footer -->
    <footer class="w-full text-center text-gray-500 text-sm mt-8 py-4 border-t border-gray-200">
        &copy; 2025 My Gadget Store. All rights reserved.
    </footer>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // Sample product data
            const products = [
                { id: 1, name: 'Wireless Headphones', price: 99.99, image: 'https://placehold.co/300x200/F0F4F8/334155?text=Headphones', description: 'Experience crystal-clear audio with our premium wireless headphones.' },
                { id: 2, name: 'Smartwatch', price: 199.99, image: 'https://placehold.co/300x200/F0F4F8/334155?text=Smartwatch', description: 'Track your fitness, receive notifications, and stay connected on the go.' },
                { id: 3, name: 'Portable Bluetooth Speaker', price: 49.99, image: 'https://placehold.co/300x200/F0F4F8/334155?text=Speaker', description: 'Powerful sound in a compact design, perfect for any adventure.' },
                { id: 4, name: 'USB-C Hub', price: 29.99, image: 'https://placehold.co/300x200/F0F4F8/334155?text=USB-C+Hub', description: 'Expand your laptop\'s connectivity with multiple ports and fast data transfer.' },
                { id: 5, name: 'External SSD 1TB', price: 129.99, image: 'https://placehold.co/300x200/F0F4F8/334155?text=SSD', description: 'Blazing fast external storage for all your photos, videos, and documents.' },
                { id: 6, name: 'Gaming Mouse', price: 59.99, image: 'https://placehold.co/300x200/F0F4F8/334155?text=Gaming+Mouse', description: 'Precision and speed for the ultimate gaming experience.' },
            ];

            let cart = []; // Array to store items in the cart

            // Get DOM elements
            const productsContainer = document.getElementById('productsContainer');
            const cartItemsContainer = document.getElementById('cartItemsContainer');
            const cartTotalSpan = document.getElementById('cartTotal');
            const cartItemCountSpan = document.getElementById('cartItemCount');
            const emptyCartMessage = document.getElementById('emptyCartMessage');
            const checkoutButton = document.getElementById('checkoutButton');
            const checkoutModal = document.getElementById('checkoutModal');
            const closeModalButton = document.getElementById('closeModalButton');

            /**
             * Renders all products from the 'products' array into the products container.
             */
            function renderProducts() {
                productsContainer.innerHTML = ''; // Clear existing products
                products.forEach(product => {
                    const productCard = document.createElement('div');
                    productCard.className = 'bg-blue-50 p-6 rounded-lg shadow-md hover:shadow-xl transition-shadow duration-300 ease-in-out border border-blue-200 flex flex-col items-center text-center';
                    productCard.innerHTML = `
                        <img src="${product.image}" alt="${product.name}" class="w-full h-40 object-cover rounded-md mb-4 shadow-sm">
                        <h3 class="text-xl font-semibold text-blue-700 mb-2">${product.name}</h3>
                        <p class="text-gray-700 text-sm mb-3 line-clamp-3">${product.description}</p>
                        <p class="text-2xl font-bold text-gray-900 mb-4">$${product.price.toFixed(2)}</p>
                        <button class="addToCartBtn bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition duration-300 ease-in-out text-base font-medium w-full" data-product-id="${product.id}">
                            Add to Cart
                        </button>
                    `;
                    productsContainer.appendChild(productCard);
                });

                // Add event listeners to "Add to Cart" buttons after they are rendered
                document.querySelectorAll('.addToCartBtn').forEach(button => {
                    button.addEventListener('click', addToCart);
                });
            }

            /**
             * Adds a product to the cart.
             * @param {Event} event - The click event object.
             */
            function addToCart(event) {
                const productId = parseInt(event.target.dataset.productId);
                const product = products.find(p => p.id === productId);

                if (product) {
                    const existingCartItem = cart.find(item => item.id === productId);
                    if (existingCartItem) {
                        existingCartItem.quantity++;
                    } else {
                        cart.push({ ...product, quantity: 1 });
                    }
                    updateCartDisplay();
                }
            }

            /**
             * Updates the quantity of a product in the cart.
             * @param {number} productId - The ID of the product.
             * @param {number} change - The amount to change the quantity by (e.g., 1 for increment, -1 for decrement).
             */
            function updateCartQuantity(productId, change) {
                const cartItem = cart.find(item => item.id === productId);
                if (cartItem) {
                    cartItem.quantity += change;
                    if (cartItem.quantity <= 0) {
                        cart = cart.filter(item => item.id !== productId); // Remove item if quantity is 0 or less
                    }
                    updateCartDisplay();
                }
            }

            /**
             * Removes a product completely from the cart.
             * @param {number} productId - The ID of the product to remove.
             */
            function removeFromCart(productId) {
                cart = cart.filter(item => item.id !== productId);
                updateCartDisplay();
            }

            /**
             * Renders the current state of the cart in the sidebar and updates totals.
             */
            function renderCartItems() {
                cartItemsContainer.innerHTML = ''; // Clear existing cart items
                if (cart.length === 0) {
                    emptyCartMessage.classList.remove('hidden');
                    checkoutButton.disabled = true;
                } else {
                    emptyCartMessage.classList.add('hidden');
                    checkoutButton.disabled = false;
                    cart.forEach(item => {
                        const cartItemDiv = document.createElement('div');
                        cartItemDiv.className = 'flex items-center justify-between bg-gray-50 p-3 rounded-lg mb-2 shadow-sm border border-gray-200';
                        cartItemDiv.innerHTML = `
                            <div class="flex items-center space-x-3">
                                <img src="${item.image}" alt="${item.name}" class="w-12 h-12 object-cover rounded-md">
                                <div>
                                    <h4 class="text-sm font-semibold text-gray-800">${item.name}</h4>
                                    <p class="text-xs text-gray-600">$${item.price.toFixed(2)} x ${item.quantity}</p>
                                </div>
                            </div>
                            <div class="flex items-center space-x-2">
                                <button class="quantity-btn text-blue-500 hover:text-blue-700" data-action="decrement" data-product-id="${item.id}">-</button>
                                <span class="text-gray-800 font-medium">${item.quantity}</span>
                                <button class="quantity-btn text-blue-500 hover:text-blue-700" data-action="increment" data-product-id="${item.id}">+</button>
                                <button class="remove-from-cart-btn text-red-500 hover:text-red-700 ml-2" data-product-id="${item.id}">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                    </svg>
                                </button>
                            </div>
                        `;
                        cartItemsContainer.appendChild(cartItemDiv);
                    });

                    // Add event listeners for quantity and remove buttons
                    document.querySelectorAll('.quantity-btn').forEach(button => {
                        button.addEventListener('click', (event) => {
                            const productId = parseInt(event.target.dataset.productId);
                            const action = event.target.dataset.action;
                            updateCartQuantity(productId, action === 'increment' ? 1 : -1);
                        });
                    });

                    document.querySelectorAll('.remove-from-cart-btn').forEach(button => {
                        button.addEventListener('click', (event) => {
                            const productId = parseInt(event.target.dataset.productId);
                            removeFromCart(productId);
                        });
                    });
                }
            }

            /**
             * Calculates and updates the total price of items in the cart.
             */
            function updateCartTotal() {
                const total = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
                cartTotalSpan.textContent = `$${total.toFixed(2)}`;
            }

            /**
             * Updates the total count of items in the cart displayed in the header.
             */
            function updateCartItemCount() {
                const itemCount = cart.reduce((sum, item) => sum + item.quantity, 0);
                cartItemCountSpan.textContent = itemCount;
            }

            /**
             * Consolidates all cart display updates into one function.
             */
            function updateCartDisplay() {
                renderCartItems();
                updateCartTotal();
                updateCartItemCount();
            }

            /**
             * Handles the checkout process (simulated).
             */
            function handleCheckout() {
                if (cart.length > 0) {
                    // Simulate order placement
                    console.log('Order placed:', cart);
                    // Show confirmation modal
                    checkoutModal.classList.remove('hidden');
                    cart = []; // Clear the cart after checkout
                    updateCartDisplay(); // Update display to show empty cart
                } else {
                    console.log('Cart is empty. Cannot checkout.');
                }
            }

            // Event listener for the Checkout button
            checkoutButton.addEventListener('click', handleCheckout);

            // Event listener for closing the checkout modal
            closeModalButton.addEventListener('click', () => {
                checkoutModal.classList.add('hidden');
            });

            // Initial render of products and cart on page load
            renderProducts();
            updateCartDisplay();
        });
    </script>
</body>
</html>
